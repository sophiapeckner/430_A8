----QUIT----2024-03-01T12:34:42.799915+01:00 Pharo10-SNAPSHOT-64bit-28169ae.image priorSource: 0!----QUIT----2024-03-01T12:35:12.44966+01:00 Pharo10-SNAPSHOT-64bit-28169ae.image priorSource: 0!Object subclass: #MyApp	instanceVariableNames: '' 	classVariableNames: ''	package: 'QTUM'!!MyApp commentStamp: 'SophiaPeckner 6/3/2025 22:48' prior: 0!Main equivalent to Java!Object subclass: #ExprC	instanceVariableNames: '' 	classVariableNames: ''	package: 'QTUM'!!ExprC commentStamp: 'SophiaPeckner 6/3/2025 22:49' prior: 0!ExprC for AST!ExprC subclass: #NumC	instanceVariableNames: 'n' 	classVariableNames: ''	package: 'QTUM'!!NumC commentStamp: 'SophiaPeckner 6/3/2025 22:50' prior: 0!NumC equivalent in asgn4!----QUIT----2025-06-03T22:50:20.158618-07:00 QTUM.image priorSource: 99!!MyApp methodsFor: 'as yet unclassified' stamp: 'MStavr 6/3/2025 23:04'!main: aExprC	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"		Transcript show: 'Hello World!!'.	(aExprC isKindOf: NumC)				ifTrue: [Transcript show: 'Hello World!!'.	]			! !!MyApp methodsFor: 'accessing' stamp: 'MStavr 6/3/2025 23:05' prior: 33555312!main: aExprC	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	Transcript show: 'Hello World!!'.	(aExprC isKindOf: NumC) ifTrue: [  ]! !!MyApp methodsFor: 'accessing' stamp: 'MStavr 6/3/2025 23:06' prior: 33555622!main: aExprC	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"		Transcript show: 'Hello World!!'.	(aExprC isKindOf: NumC)				ifTrue: [Transcript show: 'Hello World!!'.]			! !!MyApp methodsFor: 'accessing' stamp: 'MStavr 6/3/2025 23:06' prior: 33555893!main: aExprC	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"		Transcript show: 'Hello World!!'.	(aExprC isKindOf: NumC)				ifTrue: [Transcript show: 'Hello World!!'.]			! !!MyApp class methodsFor: 'as yet unclassified' stamp: 'MStavr 6/3/2025 23:08'!main: aExprC	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"		Transcript show: 'Hello World!!'.	(aExprC isKindOf: NumC)				ifTrue: [Transcript show: 'Hello World!!'.]		! !!MyApp class methodsFor: 'accessing' stamp: 'MStavr 6/3/2025 23:08' prior: 33556511!main: aExprC	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	Transcript show: 'Hello World!!'.	(aExprC isKindOf: NumC) ifTrue: [  ]! !!NumC methodsFor: 'access' stamp: 'MStavr 6/4/2025 10:15'!n: aNumber	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					n:= aNumber! !!NumC methodsFor: 'as yet unclassified' stamp: 'MStavr 6/4/2025 10:17'!n	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^n! !!MyApp methodsFor: 'accessing' stamp: 'MStavr 6/4/2025 10:20' prior: 33556202!main: aExprC	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"		Transcript show: 'Hello World!!'.	(aExprC isKindOf: NumC)				ifTrue: [Transcript show: aExprC n.]		! !----SNAPSHOT----2025-06-04T10:22:46.33-07:00 QTUM.image priorSource: 732!!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 10:28' prior: 33556825!main: aExprC    "Prints a message and checks if the argument is an instance of NumC"    Transcript show: 'Hello World!!'; cr.    (aExprC isKindOf: NumC)        ifTrue: [            Transcript show: 'The argument is a NumC.'; cr.        ]        ifFalse: [            Transcript show: 'The argument is not a NumC.'; cr.        ].! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 10:33' prior: 33557862!main: aExprC    "Prints the value if aExprC is a NumC"    (aExprC isKindOf: NumC)        ifTrue: [            Transcript show: 'The value is: ', aExprC n printString; cr.        ]        ifFalse: [            Transcript show: 'Not a NumC instance'; cr.        ].! !ExprC subclass: #StrC	instanceVariableNames: 's' 	classVariableNames: ''	package: 'QTUM'!!StrC commentStamp: 'SophiaPeckner 6/4/2025 10:36' prior: 0!StrC representation as in asgn4!ExprC subclass: #IdC	instanceVariableNames: 'name' 	classVariableNames: ''	package: 'QTUM'!!IdC commentStamp: 'SophiaPeckner 6/4/2025 10:37' prior: 0!IdC representation as in asgn4!!IdC methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 10:38'!name	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^name! !!IdC methodsFor: 'access' stamp: 'SophiaPeckner 6/4/2025 10:39'!name: aSymbol 	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					name:= aSymbol! !!StrC methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 10:39'!s	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^s! !!StrC methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 10:40'!s: aString	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					s:=aString! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 10:40'!interp: aExprC    "Prints the value if aExprC is a NumC"    (aExprC isKindOf: NumC)        ifTrue: [            Transcript show: 'The value is: ', aExprC n printString; cr.        ]        ifFalse: [            Transcript show: 'Not a NumC instance'; cr.        ].	(aExprC isKindOf: StrC)        ifTrue: [            Transcript show: 'The value is: ', aExprC s printString; cr.        ]        ifFalse: [            Transcript show: 'Not a NumC instance'; cr.        ].	(aExprC isKindOf: IdC)        ifTrue: [            Transcript show: 'The value is: ', aExprC name printString; cr.        ]        ifFalse: [            Transcript show: 'Not a NumC instance'; cr.        ].! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 10:42' prior: 33559819!interp: aExprC    "Prints the value if aExprC is a NumC"    (aExprC isKindOf: NumC)        ifTrue: [            Transcript show: 'The value is: ', aExprC n printString; cr.        ].	(aExprC isKindOf: StrC)        ifTrue: [            Transcript show: 'The value is: ', aExprC s printString; cr.        ].	(aExprC isKindOf: IdC)        ifTrue: [            Transcript show: 'The value is: ', aExprC name printString; cr.        ].! !MyApp class removeSelector: #main:!MyApp removeSelector: #main:!----SNAPSHOT----2025-06-04T10:50:10.717739-07:00 QTUM.image priorSource: 3262!Object subclass: #Value	instanceVariableNames: '' 	classVariableNames: ''	package: 'QTUM'!!Value commentStamp: 'MStavr 6/4/2025 10:54' prior: 0!Represents values as in a4.More or less a wrapper for all the subclasses!Value subclass: #NumV	instanceVariableNames: '' 	classVariableNames: ''	package: 'QTUM'!!NumV commentStamp: 'MStavr 6/4/2025 10:55' prior: 0!Numbers as in a4, but this time as a value!Value subclass: #NumV	instanceVariableNames: 'n'	classVariableNames: ''	package: 'QTUM'!Value subclass: #BoolV	instanceVariableNames: 'val' 	classVariableNames: ''	package: 'QTUM'!!BoolV commentStamp: 'MStavr 6/4/2025 10:57' prior: 0!Represents bolleans as in A4will only ever hold true/false!Value subclass: #StrV	instanceVariableNames: 's' 	classVariableNames: ''	package: 'QTUM'!!StrV commentStamp: 'MStavr 6/4/2025 10:57' prior: 0!Represents StrVs as in A4holds the string as a value!!StrV methodsFor: 'instantiate' stamp: 'MStavr 6/4/2025 10:59'!new: aString	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					s:= aString.! !!StrV methodsFor: 'instantiate' stamp: 'MStavr 6/4/2025 12:12'!s: aString	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					s:= aString.! !StrV removeSelector: #new:!!StrV methodsFor: 'as yet unclassified' stamp: 'MStavr 6/4/2025 12:13'!s	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^s! !!NumV methodsFor: 'as yet unclassified' stamp: 'MStavr 6/4/2025 12:15'!n	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^n! !!NumV methodsFor: 'accessing' stamp: 'MStavr 6/4/2025 12:15'!n: aNumber	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					n:= aNumber! !!MyApp class methodsFor: 'accessing' stamp: 'MStavr 6/4/2025 12:27' prior: 33560616!interp: aExprC    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n.				Transcript show: value n; cr. 				^value				        ].	(aExprC isKindOf: StrC)        ifTrue: [            Transcript show: 'The value is: ', aExprC s printString; cr.        ].	(aExprC isKindOf: IdC)        ifTrue: [            Transcript show: 'The value is: ', aExprC name printString; cr.        ].! !!MyApp class methodsFor: 'accessing' stamp: 'MStavr 6/4/2025 12:41' prior: 33563219!interp: aExprC    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value n: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [            Transcript show: 'The value is: ', aExprC name printString; cr.        ].! !!MyApp class methodsFor: 'accessing' stamp: 'MStavr 6/4/2025 12:48' prior: 33563777!interp: aExprC    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [            Transcript show: 'The value is: ', aExprC name printString; cr.        ].! !!MyApp class methodsFor: 'accessing' stamp: 'MStavr 6/4/2025 13:05' prior: 33564300!interp: aExprC    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				        ].! !Value subclass: #PrimV	instanceVariableNames: '' 	classVariableNames: ''	package: 'QTUM'!!PrimV commentStamp: 'MStavr 6/4/2025 21:03' prior: 0!vlaue primv for  prim operations!Value subclass: #PrimV	instanceVariableNames: 'op'	classVariableNames: ''	package: 'QTUM'!!MyApp class methodsFor: 'accessing' stamp: 'MStavr 6/4/2025 21:05'!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				anEnvironment keysDo: 				[ :key | 				]				        ].! !----SNAPSHOT----2025-06-04T21:05:43.746-07:00 QTUM.image priorSource: 6699!!PrimV methodsFor: 'instantiate' stamp: 'SophiaPeckner 6/4/2025 21:19'!op: aSymbol	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					op := aSymbol! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:26' prior: 33565675!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: name.        ].! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:27' prior: 33566622!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^name				"^anEnvironment at: name."        ].! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:28' prior: 33567262!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^varName				"^anEnvironment at: name."        ].! !ExprC subclass: #LamC	instanceVariableNames: 'p b' 	classVariableNames: ''	package: 'QTUM'!!LamC commentStamp: 'SophiaPeckner 6/4/2025 21:31' prior: 0!LamC as described in asgn4!!LamC methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:33'!p	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^p! !!LamC methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:33'!p: aList	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					p := aList! !!LamC methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:33'!b	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^b! !!LamC methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:34'!b: aBody	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					b := aBody! !Value subclass: #CloV	instanceVariableNames: 'p b env' 	classVariableNames: ''	package: 'QTUM'!!CloV methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 21:36'!p	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^p! !!CloV methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:36'!b	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^b! !!CloV methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 21:36'!env	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^env! !!CloV methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 21:36'!b: aBody	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					b := aBody! !!CloV methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 21:37'!p: params	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					p := params! !!CloV methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 21:37'!env: anEnv	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					env := anEnv ! !!ManifestQTUM commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestQTUM commentStamp: 'SophiaPeckner 6/4/2025 21:37' prior: 33570781!CloV Value as in asgn4!!CloV commentStamp: 'SophiaPeckner 6/4/2025 21:38' prior: 0!CloV as in asgn4!MyApp class removeSelector: #interp:!Smalltalk globals removeClassNamed: #AnObsoleteManifestQTUM!!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:41' prior: 33567914!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				anEnvironment at: name.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.							 ]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:41' prior: 33571415!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: name.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.							 ]! !PrimV class	instanceVariableNames: 'op'!PrimV class	instanceVariableNames: ''!!PrimV methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 21:46'!op	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^op! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:48' prior: 33572142!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				anEnvironment valuesDo: [ :value | Transcript show: (value op) printString; cr ].				^anEnvironment at: name.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.							 ]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:48' prior: 33573150!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.							 ]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 21:52' prior: 33573964!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ]! !ExprC subclass: #AppC	instanceVariableNames: 'fun args' 	classVariableNames: ''	package: 'QTUM'!!AppC methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 22:04'!fun	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^fun! !!AppC methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 22:04'!args	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					^args! !!ManifestQTUM commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestQTUM commentStamp: 'SophiaPeckner 6/4/2025 22:04' prior: 33575975!AppC as defined in asgn4!Smalltalk globals removeClassNamed: #AnObsoleteManifestQTUM!!AppC commentStamp: 'SophiaPeckner 6/4/2025 22:05' prior: 0!AppC as defined in asgn4!!AppC methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:05'!args: anArgs	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					args := anArgs! !!AppC methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 22:05'!fun: myFun	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"					fun := myFun! !!PrimV class methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 22:21'!conversion: op arguments: args	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"					(op = #+)		ifTrue: [ 			|operand1 operand2|			operand1 := args at: 0.			operand2 := args at: 1.			^operand1 n]! !!PrimV class methodsFor: 'as yet unclassified' stamp: 'SophiaPeckner 6/4/2025 22:21' prior: 33576992!conversion: op arguments: args	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"					(op = #+)		ifTrue: [ 			|operand1 operand2|			operand1 := args at: 0.			operand2 := args at: 1.			^operand1 n + operand2 n]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:24' prior: 33574695!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].						(function isKindOf: PrimV) 				ifTrue: [ 					PrimV conversion: (function op) arguments: argVals ]			]! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:32' prior: 33577353!conversion: op arguments: args	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"					(op = #+)		ifTrue: [ 			|operand1 operand2|			operand1 := args at: 1.			operand2 := args at: 2.			^operand1 n + operand2 n]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:37' prior: 33577717!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].						(function isKindOf: PrimV) 				ifTrue: [ 					^PrimV conversion: (function op) arguments: argVals ].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^MyApp interp: function b env: newEnv.					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:40' prior: 33579218!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].						(function isKindOf: PrimV) 				ifTrue: [ 					^PrimV conversion: (function op) arguments: argVals ].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^MyApp interp: function b env: newEnv.					 ]			]! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:45' prior: 33578854!conversion: op arguments: args	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"					(op = #+)		ifTrue: [ 			|operand1 operand2|			operand1 := args at: 1.			operand2 := args at: 2.			Transcript show: (operand1 n + operand2 n).			^operand1 n + operand2 n]! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:45' prior: 33581952!conversion: op arguments: args	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"		Transcript show: 'Hellow'.			(op = #+)		ifTrue: [ 			|operand1 operand2|			operand1 := args at: 1.			operand2 := args at: 2.						^operand1 n + operand2 n]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:46' prior: 33580587!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].						(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals )].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:47' prior: 33582754!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].						(function isKindOf: PrimV) 				ifTrue: [ 					Transcript show: 'helloooo'.					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:47' prior: 33584126!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: 'in APC'.			(function isKindOf: PrimV) 				ifTrue: [ 					Transcript show: 'helloooo'.					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:47' prior: 33585531!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: function.			(function isKindOf: PrimV) 				ifTrue: [ 					Transcript show: 'helloooo'.					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:48' prior: 33586962!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := MyApp interp: aExprC fun env: anEnvironment.			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: function; cr.			(function isKindOf: PrimV) 				ifTrue: [ 					Transcript show: 'helloooo'.					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:48' prior: 33588393!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: function; cr.			(function isKindOf: PrimV) 				ifTrue: [ 					Transcript show: 'helloooo'.					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:49' prior: 33589828!interp: aExprC env: anEnvironment    "Interps the ExprC"	Transcript show: aExprC; cr.    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: function; cr.			(function isKindOf: PrimV) 				ifTrue: [ 					Transcript show: 'helloooo'.					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 22:50' prior: 33591265!interp: aExprC env: anEnvironment    "Interps the ExprC"	Transcript show: aExprC; cr.    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].						(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:54' prior: 33582360!conversion: op arguments: args	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"		Transcript show: 'Hellow'.			(op = #+)		ifTrue: [ 			|operand1 operand2|			operand1 := args at: 1.			operand2 := args at: 2.						^(operand1 n) + (operand2 n)]! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:54' prior: 33594130!conversion: op arguments: args	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"		Transcript show: 'Hellow'.			(op = #+)		ifTrue: [ 			|operand1 operand2|			operand1 := args at: 1.			operand2 := args at: 2.						^(operand1 n) + (operand2 n)].! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:55' prior: 33594525!conversion: op arguments: args    "Handles basic operations like + by extracting values from args."    (op = #+)        ifTrue: [            | operand1 operand2 |            operand1 := args at: 1.            operand2 := args at: 2.            ^ (operand1 n) + (operand2 n)        ].! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:58' prior: 33594921!conversion: op arguments: args    "Handles basic operations like + by extracting values from args."    (op = #+)        ifTrue: [            | operand1 operand2 |            operand1 := args at: 1.            operand2 := args at: 2.				Transcript show: (operand1 n); cr.				Transcript show: (operand2 n); cr.            ^ (operand1 n) + (operand2 n)        ].! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:58' prior: 33595307!conversion: op arguments: args    "Handles basic operations like + by extracting values from args."    (op = #+)        ifTrue: [            | operand1 operand2 |            operand1 := args at: 1.            operand2 := args at: 0.				Transcript show: (operand1 n); cr.				Transcript show: (operand2 n); cr.            ^ (operand1 n) + (operand2 n)        ].! !!PrimV class methodsFor: 'helper' stamp: 'SophiaPeckner 6/4/2025 22:59' prior: 33595771!conversion: op arguments: args    "Handles basic operations like + by extracting values from args."    (op = #+)        ifTrue: [            | operand1 operand2 |            operand1 := args at: 1.            operand2 := args at: 2.				Transcript show: (operand1 n); cr.				Transcript show: (operand2 n); cr.            ^ (operand1 n) + (operand2 n)        ].! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 23:00' prior: 33592731!interp: aExprC env: anEnvironment    "Interps the ExprC"	Transcript show: aExprC; cr.    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: argVals; cr.						(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 23:01' prior: 33596702!interp: aExprC env: anEnvironment    "Interps the ExprC"	Transcript show: aExprC; cr.    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: (argVals at: 1); cr.			Transcript show: (argVals at: 2); cr.						(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 23:03' prior: 33598137!interp: aExprC env: anEnvironment    "Interps the ExprC"	Transcript show: aExprC; cr.    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].			Transcript show: (aExprC args); cr.						(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 23:04' prior: 33599621!interp: aExprC env: anEnvironment    "Interps the ExprC"	Transcript show: aExprC; cr.    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			Transcript show: 'args'.			Transcript show: (aExprC args at: 1); cr.			Transcript show: (aExprC args at: 2); cr.				function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].								(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 23:05' prior: 33601062!interp: aExprC env: anEnvironment    "Interps the ExprC"	Transcript show: aExprC; cr.    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			Transcript show: 'args'.			Transcript show: ((aExprC args at: 1) n); cr.			Transcript show: ((aExprC args at: 2) n); cr.				function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].								(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 23:07' prior: 33602585!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			Transcript show: 'args'.			Transcript show: ((aExprC args at: 1) n); cr.			Transcript show: ((aExprC args at: 2) n); cr.				function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].								(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !!MyApp class methodsFor: 'accessing' stamp: 'SophiaPeckner 6/4/2025 23:10' prior: 33604116!interp: aExprC env: anEnvironment    "Interps the ExprC"    (aExprC isKindOf: NumC)        ifTrue: [            |value|				value := NumV new.				value n: aExprC n. 				^value        ].	(aExprC isKindOf: StrC)        ifTrue: [            |value|				value := StrV new.				value s: aExprC s.				^value        ].	(aExprC isKindOf: IdC)        ifTrue: [				"Create some lookup function"				"Prolly just put it in this part of the function"            |varName|				varName := aExprC name.				^anEnvironment at: varName.        ].	(aExprC isKindOf: LamC)		ifTrue: [ 				|closure|				closure := CloV new.				closure p: aExprC p.				closure b: aExprC b.				closure env: anEnvironment.				^closure.			 ].			(aExprC isKindOf: AppC)		ifTrue: [ 			|function argVals|.			function := (MyApp interp: aExprC fun env: anEnvironment).			argVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].								(function isKindOf: PrimV) 				ifTrue: [ 					^(PrimV conversion: (function op) arguments: argVals)].							(function isKindOf: CloV)				ifTrue: [ 					|newEnv|					newEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].					^(MyApp interp: function b env: newEnv).					 ]			]! !