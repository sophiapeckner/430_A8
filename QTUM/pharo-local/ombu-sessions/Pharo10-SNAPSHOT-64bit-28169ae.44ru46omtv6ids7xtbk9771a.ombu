OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2025-06-04T21:19:20.314129-07:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-28169ae.3cuaytlrnbmsqht2408aczdio', '31' ],		#self : OmReference [ '1' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Value subclass: #PrimV\r\tinstanceVariableNames: \'op\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'Value',				#traitCompositionSource : '{}'			},			#name : #PrimV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PrimV,						#isMetaSide : false					},					#name : #op,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'PrimV class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'PrimV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PrimV,					#isMetaSide : false				},				#parent : @7,				#content : 'vlaue primv for  prim operations',				#stamp : 'MStavr 6/4/2025 21:03'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#protocol : #instantiate	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:19:59.292082-07:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PrimV,				#isMetaSide : false			},			#name : #'op:',			#protocol : #instantiate,			#sourceCode : 'op: aSymbol\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\top := aSymbol',			#stamp : 'SophiaPeckner 6/4/2025 21:19',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:26:54.933286-07:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\tanEnvironment keysDo: \r\t\t\t\t[ :key | \r\t\t\t\t]\r\t\t\t\t\r        ].',			#stamp : 'MStavr 6/4/2025 21:05',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: name.\r        ].',			#stamp : 'SophiaPeckner 6/4/2025 21:26',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:27:29.495447-07:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: name.\r        ].',			#stamp : 'SophiaPeckner 6/4/2025 21:26',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^name\r\t\t\t\t"^anEnvironment at: name."\r        ].',			#stamp : 'SophiaPeckner 6/4/2025 21:27',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:28:10.454016-07:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^name\r\t\t\t\t"^anEnvironment at: name."\r        ].',			#stamp : 'SophiaPeckner 6/4/2025 21:27',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^varName\r\t\t\t\t"^anEnvironment at: name."\r        ].',			#stamp : 'SophiaPeckner 6/4/2025 21:28',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:31:40.042388-07:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'ExprC subclass: #LamC\r\tinstanceVariableNames: \'p b\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'ExprC',				#traitCompositionSource : '{}'			},			#name : #LamC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LamC,						#isMetaSide : false					},					#name : #p,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LamC,						#isMetaSide : false					},					#name : #b,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'LamC class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'LamC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LamC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:31:53.738311-07:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'ExprC subclass: #LamC\r\tinstanceVariableNames: \'p b\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'ExprC',				#traitCompositionSource : '{}'			},			#name : #LamC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LamC,						#isMetaSide : false					},					#name : #p,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LamC,						#isMetaSide : false					},					#name : #b,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'LamC class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'LamC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LamC,					#isMetaSide : false				},				#parent : @7,				#content : 'LamC as described in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 21:31'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'LamC as described in asgn4',		#oldStamp : '',		#newStamp : 'SophiaPeckner 6/4/2025 21:31'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:32:42.42953-07:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'ExprC subclass: #LamC\r\tinstanceVariableNames: \'p b\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'ExprC',				#traitCompositionSource : '{}'			},			#name : #LamC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LamC,						#isMetaSide : false					},					#name : #p,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LamC,						#isMetaSide : false					},					#name : #b,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'LamC class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'LamC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LamC,					#isMetaSide : false				},				#parent : @7,				#content : 'LamC as described in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 21:31'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#protocol : #accessing	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:33:00.880598-07:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LamC,				#isMetaSide : false			},			#name : #p,			#protocol : #accessing,			#sourceCode : 'p\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^p',			#stamp : 'SophiaPeckner 6/4/2025 21:33',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:33:40.498702-07:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LamC,				#isMetaSide : false			},			#name : #'p:',			#protocol : #accessing,			#sourceCode : 'p: aList\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tp := aList',			#stamp : 'SophiaPeckner 6/4/2025 21:33',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:33:55.334476-07:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LamC,				#isMetaSide : false			},			#name : #b,			#protocol : #accessing,			#sourceCode : 'b\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^b',			#stamp : 'SophiaPeckner 6/4/2025 21:33',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:34:08.991014-07:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LamC,				#isMetaSide : false			},			#name : #'b:',			#protocol : #accessing,			#sourceCode : 'b: aBody\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tb := aBody',			#stamp : 'SophiaPeckner 6/4/2025 21:34',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:35:51.667094-07:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Value subclass: #CloV\r\tinstanceVariableNames: \'p b env\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'Value',				#traitCompositionSource : '{}'			},			#name : #CloV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CloV,						#isMetaSide : false					},					#name : #p,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CloV,						#isMetaSide : false					},					#name : #b,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CloV,						#isMetaSide : false					},					#name : #env,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'CloV class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'CloV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CloV,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:36:05.320019-07:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #p,			#protocol : #'as yet unclassified',			#sourceCode : 'p\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^p',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:36:05.327552-07:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #p,			#protocol : #'as yet unclassified',			#sourceCode : 'p\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^p',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #p,			#protocol : #accessing,			#sourceCode : 'p\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^p',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:36:09.903662-07:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #b,			#protocol : #accessing,			#sourceCode : 'b\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^b',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:36:22.087998-07:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #env,			#protocol : #'as yet unclassified',			#sourceCode : 'env\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^env',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:36:22.099774-07:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #env,			#protocol : #'as yet unclassified',			#sourceCode : 'env\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^env',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #env,			#protocol : #accessing,			#sourceCode : 'env\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^env',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:36:37.392213-07:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'b:',			#protocol : #'as yet unclassified',			#sourceCode : 'b: aBody\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tb := aBody',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:36:37.400681-07:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'b:',			#protocol : #'as yet unclassified',			#sourceCode : 'b: aBody\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tb := aBody',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'b:',			#protocol : #accessing,			#sourceCode : 'b: aBody\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tb := aBody',			#stamp : 'SophiaPeckner 6/4/2025 21:36',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:04.947963-07:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'p:',			#protocol : #'as yet unclassified',			#sourceCode : 'p: params\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tp := params',			#stamp : 'SophiaPeckner 6/4/2025 21:37',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:04.955579-07:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'p:',			#protocol : #'as yet unclassified',			#sourceCode : 'p: params\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tp := params',			#stamp : 'SophiaPeckner 6/4/2025 21:37',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'p:',			#protocol : #accessing,			#sourceCode : 'p: params\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tp := params',			#stamp : 'SophiaPeckner 6/4/2025 21:37',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:25.895739-07:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'env:',			#protocol : #'as yet unclassified',			#sourceCode : 'env: anEnv\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tenv := anEnv ',			#stamp : 'SophiaPeckner 6/4/2025 21:37',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:25.904821-07:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'env:',			#protocol : #'as yet unclassified',			#sourceCode : 'env: anEnv\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tenv := anEnv ',			#stamp : 'SophiaPeckner 6/4/2025 21:37',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CloV,				#isMetaSide : false			},			#name : #'env:',			#protocol : #accessing,			#sourceCode : 'env: anEnv\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tenv := anEnv ',			#stamp : 'SophiaPeckner 6/4/2025 21:37',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:55.964842-07:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:55.971053-07:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpCategoryAddition {		#classCategoryName : #QTUM-Manifest,		#affectedPackageName : #QTUM	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:55.976544-07:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #QTUM,		#newCategory : #QTUM-Manifest,		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:55.979084-07:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#oldStamp : '',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:37:55.98184-07:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : 'CloV Value as in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 21:37'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newComment : 'CloV Value as in asgn4',		#oldStamp : '<historical>',		#newStamp : 'SophiaPeckner 6/4/2025 21:37'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:38:05.770735-07:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Value subclass: #CloV\r\tinstanceVariableNames: \'p b env\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'Value',				#traitCompositionSource : '{}'			},			#name : #CloV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CloV,						#isMetaSide : false					},					#name : #p,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CloV,						#isMetaSide : false					},					#name : #b,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CloV,						#isMetaSide : false					},					#name : #env,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'CloV class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'CloV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CloV,					#isMetaSide : false				},				#parent : @7,				#content : 'CloV as in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 21:38'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CloV as in asgn4',		#oldStamp : '',		#newStamp : 'SophiaPeckner 6/4/2025 21:38'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:38:29.919886-07:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t\r        ].',			#stamp : 'MStavr 6/4/2025 13:05',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:',			#protocol : #'as yet unclassified',			#sourceCode : 'interp: aExprC\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t\r        ].',			#stamp : 'MStavr 6/4/2025 13:05',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:38:29.935285-07:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t\r        ].',			#stamp : 'MStavr 6/4/2025 13:05',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:40:58.333374-07:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ManifestQTUM))'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2025-06-04T21:40:58.352513-07:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: #\'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'AnObsoleteManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : 'CloV Value as in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 21:37'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:41:21.787098-07:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^varName\r\t\t\t\t"^anEnvironment at: name."\r        ].',			#stamp : 'SophiaPeckner 6/4/2025 21:28',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\tanEnvironment at: name.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:41',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:41:45.843333-07:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\tanEnvironment at: name.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:41',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: name.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:41',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:45:50.044666-07:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Value subclass: #PrimV\r\tinstanceVariableNames: \'op\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'Value',				#traitCompositionSource : '{}'			},			#name : #PrimV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PrimV,						#isMetaSide : false					},					#name : #op,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'PrimV class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'PrimV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PrimV,					#isMetaSide : false				},				#parent : @7,				#content : 'vlaue primv for  prim operations',				#stamp : 'MStavr 6/4/2025 21:03'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Value subclass: #PrimV\r\tinstanceVariableNames: \'op\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'Value',				#traitCompositionSource : '{}'			},			#name : #PrimV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PrimV,						#isMetaSide : false					},					#name : #op,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'PrimV class\r\tinstanceVariableNames: \'op\'',					#traitCompositionSource : '{}'				},				#name : #'PrimV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#isMetaSide : true,							#className : #'PrimV class'						},						#name : #op,						#parent : @30					}				],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PrimV,					#isMetaSide : false				},				#parent : @23,				#content : 'vlaue primv for  prim operations',				#stamp : 'MStavr 6/4/2025 21:03'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:46:09.316336-07:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Value subclass: #PrimV\r\tinstanceVariableNames: \'op\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'Value',				#traitCompositionSource : '{}'			},			#name : #PrimV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PrimV,						#isMetaSide : false					},					#name : #op,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'PrimV class\r\tinstanceVariableNames: \'op\'',					#traitCompositionSource : '{}'				},				#name : #'PrimV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#isMetaSide : true,							#className : #'PrimV class'						},						#name : #op,						#parent : @14					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PrimV,					#isMetaSide : false				},				#parent : @7,				#content : 'vlaue primv for  prim operations',				#stamp : 'MStavr 6/4/2025 21:03'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Value subclass: #PrimV\r\tinstanceVariableNames: \'op\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'Value',				#traitCompositionSource : '{}'			},			#name : #PrimV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PrimV,						#isMetaSide : false					},					#name : #op,					#parent : @25				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'PrimV class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'PrimV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @25			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PrimV,					#isMetaSide : false				},				#parent : @25,				#content : 'vlaue primv for  prim operations',				#stamp : 'MStavr 6/4/2025 21:03'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:46:36.719001-07:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PrimV,				#isMetaSide : false			},			#name : #op,			#protocol : #'as yet unclassified',			#sourceCode : 'op\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^op',			#stamp : 'SophiaPeckner 6/4/2025 21:46',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:46:36.732849-07:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PrimV,				#isMetaSide : false			},			#name : #op,			#protocol : #'as yet unclassified',			#sourceCode : 'op\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^op',			#stamp : 'SophiaPeckner 6/4/2025 21:46',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PrimV,				#isMetaSide : false			},			#name : #op,			#protocol : #accessing,			#sourceCode : 'op\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^op',			#stamp : 'SophiaPeckner 6/4/2025 21:46',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:48:03.541217-07:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: name.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:41',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\tanEnvironment valuesDo: [ :value | Transcript show: (value op) printString; cr ].\r\t\t\t\t^anEnvironment at: name.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:48',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:48:26.475718-07:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\tanEnvironment valuesDo: [ :value | Transcript show: (value op) printString; cr ].\r\t\t\t\t^anEnvironment at: name.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:48',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:48',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T21:52:42.213664-07:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\t\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:48',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:52',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:03:53.432787-07:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'ExprC subclass: #AppC\r\tinstanceVariableNames: \'fun args\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'ExprC',				#traitCompositionSource : '{}'			},			#name : #AppC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AppC,						#isMetaSide : false					},					#name : #fun,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AppC,						#isMetaSide : false					},					#name : #args,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'AppC class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'AppC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AppC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:11.706866-07:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #fun,			#protocol : #'as yet unclassified',			#sourceCode : 'fun\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^fun',			#stamp : 'SophiaPeckner 6/4/2025 22:04',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:11.714975-07:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #fun,			#protocol : #'as yet unclassified',			#sourceCode : 'fun\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^fun',			#stamp : 'SophiaPeckner 6/4/2025 22:04',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #fun,			#protocol : #accessing,			#sourceCode : 'fun\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^fun',			#stamp : 'SophiaPeckner 6/4/2025 22:04',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:28.331267-07:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #args,			#protocol : #'as yet unclassified',			#sourceCode : 'args\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^args',			#stamp : 'SophiaPeckner 6/4/2025 22:04',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:28.338524-07:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #args,			#protocol : #'as yet unclassified',			#sourceCode : 'args\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^args',			#stamp : 'SophiaPeckner 6/4/2025 22:04',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #args,			#protocol : #accessing,			#sourceCode : 'args\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^args',			#stamp : 'SophiaPeckner 6/4/2025 22:04',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:44.017517-07:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:44.029396-07:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #QTUM,		#newCategory : #QTUM-Manifest,		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:44.032289-07:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#oldStamp : '',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:44.035338-07:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : 'AppC as defined in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 22:04'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newComment : 'AppC as defined in asgn4',		#oldStamp : '<historical>',		#newStamp : 'SophiaPeckner 6/4/2025 22:04'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:04:52.578659-07:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ManifestQTUM))'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2025-06-04T22:04:52.609773-07:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestQTUM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: #\'QTUM-Manifest\'',				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}'			},			#name : #ManifestQTUM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestQTUM class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'AnObsoleteManifestQTUM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteManifestQTUM,					#isMetaSide : false				},				#parent : @7,				#content : 'AppC as defined in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 22:04'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM-Manifest,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:05:09.345525-07:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'ExprC subclass: #AppC\r\tinstanceVariableNames: \'fun args\'\r\tclassVariableNames: \'\'\r\tpackage: \'QTUM\'',				#superclassName : 'ExprC',				#traitCompositionSource : '{}'			},			#name : #AppC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AppC,						#isMetaSide : false					},					#name : #fun,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AppC,						#isMetaSide : false					},					#name : #args,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'AppC class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'AppC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AppC,					#isMetaSide : false				},				#parent : @7,				#content : 'AppC as defined in asgn4',				#stamp : 'SophiaPeckner 6/4/2025 22:05'			},			#classVariables : OrderedCollection [ ],			#category : #QTUM,			#package : #QTUM,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AppC as defined in asgn4',		#oldStamp : '',		#newStamp : 'SophiaPeckner 6/4/2025 22:05'	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:05:32.887204-07:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #'args:',			#protocol : #accessing,			#sourceCode : 'args: anArgs\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\targs := anArgs',			#stamp : 'SophiaPeckner 6/4/2025 22:05',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:05:50.739528-07:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #'fun:',			#protocol : #'as yet unclassified',			#sourceCode : 'fun: myFun\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tfun := myFun',			#stamp : 'SophiaPeckner 6/4/2025 22:05',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:05:50.752291-07:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #'fun:',			#protocol : #'as yet unclassified',			#sourceCode : 'fun: myFun\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tfun := myFun',			#stamp : 'SophiaPeckner 6/4/2025 22:05',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AppC,				#isMetaSide : false			},			#name : #'fun:',			#protocol : #accessing,			#sourceCode : 'fun: myFun\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tfun := myFun',			#stamp : 'SophiaPeckner 6/4/2025 22:05',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:21:08.307038-07:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #'as yet unclassified',			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 0.\r\t\t\toperand2 := args at: 1.\r\t\t\t^operand1 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:21',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:21:42.316038-07:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #'as yet unclassified',			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 0.\r\t\t\toperand2 := args at: 1.\r\t\t\t^operand1 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:21',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #'as yet unclassified',			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 0.\r\t\t\toperand2 := args at: 1.\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:21',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:22:09.495644-07:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #'as yet unclassified',			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 0.\r\t\t\toperand2 := args at: 1.\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:21',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 0.\r\t\t\toperand2 := args at: 1.\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:21',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:24:24.592087-07:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ]',			#stamp : 'SophiaPeckner 6/4/2025 21:52',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tPrimV conversion: (function op) arguments: argVals ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:24',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:32:25.403813-07:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 0.\r\t\t\toperand2 := args at: 1.\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:21',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:32',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:37:04.746823-07:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tPrimV conversion: (function op) arguments: argVals ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:24',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^PrimV conversion: (function op) arguments: argVals ].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^MyApp interp: function b env: newEnv.\r\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:37',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:40:35.552599-07:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^PrimV conversion: (function op) arguments: argVals ].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^MyApp interp: function b env: newEnv.\r\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:37',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^PrimV conversion: (function op) arguments: argVals ].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^MyApp interp: function b env: newEnv.\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:40',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:45:14.640333-07:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:32',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\tTranscript show: (operand1 n + operand2 n).\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:45',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:45:57.185956-07:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\t\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\tTranscript show: (operand1 n + operand2 n).\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:45',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\tTranscript show: \'Hellow\'.\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:45',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:46:48.09351-07:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^PrimV conversion: (function op) arguments: argVals ].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^MyApp interp: function b env: newEnv.\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:40',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals )].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:46',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:47:15.87782-07:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals )].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:46',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:47',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:47:26.809585-07:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:47',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: \'in APC\'.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:47',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:47:42.538587-07:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: \'in APC\'.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:47',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:47',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:48:05.599008-07:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:47',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function; cr.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:48',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:48:25.258104-07:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := MyApp interp: aExprC fun env: anEnvironment.\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function; cr.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:48',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function; cr.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:48',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:49:40.739063-07:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function; cr.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:48',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function; cr.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:49',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:50:28.699943-07:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: function; cr.\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\tTranscript show: \'helloooo\'.\r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:49',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:50',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:54:12.92271-07:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\tTranscript show: \'Hellow\'.\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t\r\t\t\t^operand1 n + operand2 n]',			#stamp : 'SophiaPeckner 6/4/2025 22:45',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\tTranscript show: \'Hellow\'.\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t\r\t\t\t^(operand1 n) + (operand2 n)]',			#stamp : 'SophiaPeckner 6/4/2025 22:54',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:54:58.27132-07:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\tTranscript show: \'Hellow\'.\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t\r\t\t\t^(operand1 n) + (operand2 n)]',			#stamp : 'SophiaPeckner 6/4/2025 22:54',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\tTranscript show: \'Hellow\'.\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t\r\t\t\t^(operand1 n) + (operand2 n)].',			#stamp : 'SophiaPeckner 6/4/2025 22:54',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:55:21.970876-07:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r\t"comment stating purpose of class-side method"\r\t"scope: class-variables  &  class-instance-variables"\t\r\tTranscript show: \'Hellow\'.\t\t\r\t(op = #+)\r\t\tifTrue: [ \r\t\t\t|operand1 operand2|\r\t\t\toperand1 := args at: 1.\r\t\t\toperand2 := args at: 2.\r\t\t\t\r\t\t\t^(operand1 n) + (operand2 n)].',			#stamp : 'SophiaPeckner 6/4/2025 22:54',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r    "Handles basic operations like + by extracting values from args."\r\r    (op = #+)\r        ifTrue: [\r            | operand1 operand2 |\r            operand1 := args at: 1.\r            operand2 := args at: 2.\r            ^ (operand1 n) + (operand2 n)\r        ].\r',			#stamp : 'SophiaPeckner 6/4/2025 22:55',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:58:01.639639-07:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r    "Handles basic operations like + by extracting values from args."\r\r    (op = #+)\r        ifTrue: [\r            | operand1 operand2 |\r            operand1 := args at: 1.\r            operand2 := args at: 2.\r            ^ (operand1 n) + (operand2 n)\r        ].\r',			#stamp : 'SophiaPeckner 6/4/2025 22:55',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r    "Handles basic operations like + by extracting values from args."\r\r    (op = #+)\r        ifTrue: [\r            | operand1 operand2 |\r            operand1 := args at: 1.\r            operand2 := args at: 2.\r\t\t\t\tTranscript show: (operand1 n); cr.\r\t\t\t\tTranscript show: (operand2 n); cr.\r            ^ (operand1 n) + (operand2 n)\r        ].\r',			#stamp : 'SophiaPeckner 6/4/2025 22:58',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:58:30.697237-07:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r    "Handles basic operations like + by extracting values from args."\r\r    (op = #+)\r        ifTrue: [\r            | operand1 operand2 |\r            operand1 := args at: 1.\r            operand2 := args at: 2.\r\t\t\t\tTranscript show: (operand1 n); cr.\r\t\t\t\tTranscript show: (operand2 n); cr.\r            ^ (operand1 n) + (operand2 n)\r        ].\r',			#stamp : 'SophiaPeckner 6/4/2025 22:58',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r    "Handles basic operations like + by extracting values from args."\r\r    (op = #+)\r        ifTrue: [\r            | operand1 operand2 |\r            operand1 := args at: 1.\r            operand2 := args at: 0.\r\t\t\t\tTranscript show: (operand1 n); cr.\r\t\t\t\tTranscript show: (operand2 n); cr.\r            ^ (operand1 n) + (operand2 n)\r        ].\r',			#stamp : 'SophiaPeckner 6/4/2025 22:58',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T22:59:31.884013-07:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r    "Handles basic operations like + by extracting values from args."\r\r    (op = #+)\r        ifTrue: [\r            | operand1 operand2 |\r            operand1 := args at: 1.\r            operand2 := args at: 0.\r\t\t\t\tTranscript show: (operand1 n); cr.\r\t\t\t\tTranscript show: (operand2 n); cr.\r            ^ (operand1 n) + (operand2 n)\r        ].\r',			#stamp : 'SophiaPeckner 6/4/2025 22:58',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PrimV class',				#isMetaSide : true			},			#name : #'conversion:arguments:',			#protocol : #helper,			#sourceCode : 'conversion: op arguments: args\r    "Handles basic operations like + by extracting values from args."\r\r    (op = #+)\r        ifTrue: [\r            | operand1 operand2 |\r            operand1 := args at: 1.\r            operand2 := args at: 2.\r\t\t\t\tTranscript show: (operand1 n); cr.\r\t\t\t\tTranscript show: (operand2 n); cr.\r            ^ (operand1 n) + (operand2 n)\r        ].\r',			#stamp : 'SophiaPeckner 6/4/2025 22:59',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T23:00:37.208246-07:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 22:50',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: argVals; cr.\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:00',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T23:01:51.575229-07:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: argVals; cr.\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:00',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: (argVals at: 1); cr.\r\t\t\tTranscript show: (argVals at: 2); cr.\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:01',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T23:03:57.342463-07:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: (argVals at: 1); cr.\r\t\t\tTranscript show: (argVals at: 2); cr.\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:01',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: (aExprC args); cr.\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:03',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T23:04:53.887909-07:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\tTranscript show: (aExprC args); cr.\r\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:03',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tTranscript show: \'args\'.\r\t\t\tTranscript show: (aExprC args at: 1); cr.\r\t\t\tTranscript show: (aExprC args at: 2); cr.\t\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:04',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T23:05:09.648094-07:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tTranscript show: \'args\'.\r\t\t\tTranscript show: (aExprC args at: 1); cr.\r\t\t\tTranscript show: (aExprC args at: 2); cr.\t\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:04',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tTranscript show: \'args\'.\r\t\t\tTranscript show: ((aExprC args at: 1) n); cr.\r\t\t\tTranscript show: ((aExprC args at: 2) n); cr.\t\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:05',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T23:07:37.388851-07:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\tTranscript show: aExprC; cr.\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tTranscript show: \'args\'.\r\t\t\tTranscript show: ((aExprC args at: 1) n); cr.\r\t\t\tTranscript show: ((aExprC args at: 2) n); cr.\t\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:05',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tTranscript show: \'args\'.\r\t\t\tTranscript show: ((aExprC args at: 1) n); cr.\r\t\t\tTranscript show: ((aExprC args at: 2) n); cr.\t\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:07',			#package : #QTUM		}	}}OmEntry {	#tags : {		#author : 'SophiaPeckner',		#time : DateAndTime [ '2025-06-04T23:10:49.127327-07:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tTranscript show: \'args\'.\r\t\t\tTranscript show: ((aExprC args at: 1) n); cr.\r\t\t\tTranscript show: ((aExprC args at: 2) n); cr.\t\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:07',			#package : #QTUM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MyApp class',				#isMetaSide : true			},			#name : #'interp:env:',			#protocol : #accessing,			#sourceCode : 'interp: aExprC env: anEnvironment\r    "Interps the ExprC"\r\r    (aExprC isKindOf: NumC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := NumV new.\r\t\t\t\tvalue n: aExprC n. \r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: StrC)\r        ifTrue: [\r            |value|\r\t\t\t\tvalue := StrV new.\r\t\t\t\tvalue s: aExprC s.\r\t\t\t\t^value\r        ].\r\t(aExprC isKindOf: IdC)\r        ifTrue: [\r\t\t\t\t"Create some lookup function"\r\t\t\t\t"Prolly just put it in this part of the function"\r            |varName|\r\t\t\t\tvarName := aExprC name.\r\t\t\t\t^anEnvironment at: varName.\r        ].\r\t(aExprC isKindOf: LamC)\r\t\tifTrue: [ \r\t\t\t\t|closure|\r\t\t\t\tclosure := CloV new.\r\t\t\t\tclosure p: aExprC p.\r\t\t\t\tclosure b: aExprC b.\r\t\t\t\tclosure env: anEnvironment.\r\t\t\t\t^closure.\r\t\t\t ].\r\t\t\r\t(aExprC isKindOf: AppC)\r\t\tifTrue: [ \r\t\t\t|function argVals|.\r\t\t\tfunction := (MyApp interp: aExprC fun env: anEnvironment).\r\t\t\targVals := aExprC args collect: [ :a | MyApp interp: a env: anEnvironment ].\r\t\t\t\t\t\r\t\t\t(function isKindOf: PrimV) \r\t\t\t\tifTrue: [ \r\t\t\t\t\t^(PrimV conversion: (function op) arguments: argVals)].\r\t\t\t\t\r\t\t\t(function isKindOf: CloV)\r\t\t\t\tifTrue: [ \r\t\t\t\t\t|newEnv|\r\t\t\t\t\tnewEnv := (1 to: function p size) do: [ :i | anEnvironment at: (function p at: i) put: (argVals at: i) ].\r\t\t\t\t\t^(MyApp interp: function b env: newEnv).\r\t\t\t\t\t ]\r\t\t\t]',			#stamp : 'SophiaPeckner 6/4/2025 23:10',			#package : #QTUM		}	}}