|num1 num2 expr env|env := Dictionary newFrom: {	#+ -> (PrimV new op: #+; yourself).	#- -> (PrimV new op: #-; yourself).}."expr := StrC new.expr s: 'hello'.Transcript show: (MyApp interp: expr env: env); cr.expr := IdC new.expr name: #+.Transcript show: (MyApp interp: expr env: env); cr.expr := LamC new.expr p: #(a x).expr b: (StrC new s: 'a'; yourself).Transcript show: (MyApp interp: expr env: env); cr."num1 := NumC new. num1 n: 3.num2 := NumC new. num2 n: 4.expr := AppC new.expr fun: (IdC new name: #+; yourself).expr args: {num1. num2}.Transcript show: ((expr args at: 1) n).Transcript show: ((expr args at: 2) n).Transcript show: (MyApp interp: expr env: env); cr.